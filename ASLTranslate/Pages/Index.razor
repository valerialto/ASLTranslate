@page "/"
@namespace System.Web.UI.Control
@using ASLTranslate.Translator
@using Blazored.Video
@using Blazored.Video.Support
@inject IJSRuntime JS

<PageTitle>Index</PageTitle>

<div class="text-center">

	<h1>English to ASL Translator & Avatar</h1>

	<p>Welcome to our AI driven ASL avatars app.</p>

	<div class="english-input">
		<p style="padding-top:4%; font-weight:bold">Input your English Sentence:</p>

		<input class="border-4 w-1/3 rounded m-6 p-6 h-8
			border-blue-300" @bind-value="SearchText"
			@bind-value:event="oninput" placeholder="Input Text" />


		<button class="border-4 w-1/3 rounded m-6 p-6 h-8
			border-blue-300" style="background-color: #7c84eb" @onclick="Translate">
			Translate
		</button>
	</div>

	<div class ="asl-output">
		<p style="padding-top:4%; font-weight:bold">ASL Grammatical Translation:</p>

		<p>@TranslatedString</p>

	</div>

	<div class="avatar-video">

		<p style="padding-top:4%; font-weight:bold">AI Driven ASL Avatar:</p>

		@*Replace the src with the avatar generated video. Can also use the Blazor-Video version

		use this link for BlazoredVideo Implementation - mine was being iffy so https://github.com/Blazored/Video
		*@
		
		@*<iframe id="avatarVideo"
				width="560"
				height="315"
				src=@AvatarSrc
				allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
				allowfullscreen>
		</iframe>*@

		<BlazoredVideo
				EndedEvent="NextVideo"
				VideoEventOptions="options"
				id="avatar-video"
				autoplay
				class="w-100"
				style="max-width:800px;"
				controls="controls">
			<source src=@AvatarSrc type="video/mp4" />
		</BlazoredVideo>


	</div>

	@code {
		public string SearchText = "";
		public string TranslatedString = "";
		public List<string> TranslatedText = new List<string>();
		public int index = 0;
		public string AvatarSrc = "";
		Dictionary<VideoEvents, VideoStateOptions> options = new Dictionary<VideoEvents, VideoStateOptions>();

		private async Task Translate()
		{
			//send the text input to be translated probably here and save into TranslatedText
			TranslatedText = Translator.Translate(SearchText);
			TranslatedString = "";
			foreach (string s in TranslatedText) TranslatedString += s + " ";
			index = 0;
			AvatarSrc = VideoMapping.Videos[TranslatedText[index]];
			var module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/reload.js");
			await module.InvokeAsync<string>("ReloadVideo");
		}

		private async Task NextVideo(VideoState state)
		{
			if (index < TranslatedText.Count)
			{
				index++;
				AvatarSrc = VideoMapping.Videos[TranslatedText[index]];
			}
			else AvatarSrc = "";

			var module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/reload.js");
			await module.InvokeAsync<string>("ReloadVideo");
		}

		protected override void OnInitialized()
		{
			var option = new VideoStateOptions() { All = true };
			options[VideoEvents.Abort] = option;
			options[VideoEvents.CanPlay] = option;
			options[VideoEvents.CanPlayThrough] = option;
			options[VideoEvents.DurationChange] = option;
			options[VideoEvents.Emptied] = option;
			options[VideoEvents.Ended] = option;
			options[VideoEvents.Error] = option;
			options[VideoEvents.LoadedData] = option;
			options[VideoEvents.LoadedMetadata] = option;
			options[VideoEvents.LoadStart] = option;
			options[VideoEvents.Pause] = option;
			options[VideoEvents.Play] = option;
			options[VideoEvents.Playing] = option;
			options[VideoEvents.Progress] = option;
			options[VideoEvents.RateChange] = option;
			options[VideoEvents.Seeked] = option;
			options[VideoEvents.Seeking] = option;
			options[VideoEvents.Stalled] = option;
			options[VideoEvents.Suspend] = option;
			options[VideoEvents.TimeUpdate] = option;
			options[VideoEvents.VolumeChange] = option;
			options[VideoEvents.Waiting] = option;
		}
	}

</div>
